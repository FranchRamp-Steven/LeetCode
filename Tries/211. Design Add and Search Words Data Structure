//Python

class WordDictionary:
    def __init__(self):
        self.index = {}
        self.words = defaultdict(list)
        
    def compare(self, w1: str, w2: str) -> bool:
        w1 = list(w1)
        w2 = list(w2)
        
        while w1:
            c1 = w1.pop(0)
            c2 = w2.pop(0)
            
            if c1 == '.':
                continue
                
            if c1 != c2:
                return False
            
        return True
        
    def addWord(self, word: str) -> None:
        self.index[word] = True
        self.words[len(word)].append(word)
        

    def search(self, word: str) -> bool:
        if word in self.index:
            return True
        
        word_len = len(word)
        if word_len not in self.words:
            return False
        
        if word == '.' * word_len:
            return True
        
        words = self.words[word_len]
        for w in words:
            if self.compare(word, w):
                return True
            
        return False

class TrieNode():
    def __init__(self):
        self.children = collections.defaultdict(TrieNode)
        self.isWord = False
    
class WordDictionary(object):
    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word):
        node = self.root
        for w in word:
            node = node.children[w]
        node.isWord = True

    def search(self, word):
        node = self.root
        self.res = False
        self.dfs(node, word)
        return self.res
    
    def dfs(self, node, word):
        if not word:
            if node.isWord:
                self.res = True
            return 
        if word[0] == ".":
            for n in node.children.values():
                self.dfs(n, word[1:])
        else:
            node = node.children.get(word[0])
            if not node:
                return 
            self.dfs(node, word[1:])


class TrieNode():
    def __init__(self):
        self.children = collections.defaultdict(TrieNode)
        self.isWord = False
    
class WordDictionary(object):
    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word):
        node = self.root
        for w in word:
            node = node.children[w]
        node.isWord = True

    def search(self, word):
        node = self.root
        self.res = False
        self.dfs(node, word)
        return self.res
    
    def dfs(self, node, word):
        if not word:
            if node.isWord:
                self.res = True
            return 
        if word[0] == ".":
            for n in node.children.values():
                self.dfs(n, word[1:])
        else:
            node = node.children.get(word[0])
            if not node:
                return 
            self.dfs(node, word[1:])
            
            
            
Using a Dictionary of Sets: (beats ~96%)

class WordDictionary:

    def __init__(self):
        self.words = collections.defaultdict(set)
        
    def addWord(self, word: str) -> None:
    	self.words[len(word)].add(word)
        
    def search(self, word: str) -> bool:
    	for w in self.words[len(word)]:
    		for i, c in enumerate(word):
    			if c not in ['.',w[i]]: break
    		else: return True
    	return False
		
		
Using Trie and DFS:

class WordDictionary:

    def __init__(self):
        self.root = {}
        
    def addWord(self, word: str) -> None:
        node = self.root
        for c in word:
            if c not in node: node[c] = {}
            node = node[c]
        node['*'] = False
        
    def search(self, w: str) -> bool:
    	def dfs(node, i):
    		if node == False: return False
    		if i == L: return '*' in node
    		if w[i] != '.':
    			if w[i] not in node: return False
    			return dfs(node[w[i]],i+1)
    		for j in node.values():
    			if dfs(j,i+1): return True
    		return False
    	node, L = self.root, len(w)
    	return dfs(node,0)

class TrieNode:
    def __init__(self):
        self.children = {}  # a : TrieNode
        self.word = False


class WordDictionary:
    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word: str) -> None:
        cur = self.root
        for c in word:
            if c not in cur.children:
                cur.children[c] = TrieNode()
            cur = cur.children[c]
        cur.word = True

    def search(self, word: str) -> bool:
        def dfs(j, root):
            cur = root

            for i in range(j, len(word)):
                c = word[i]
                if c == ".":
                    for child in cur.children.values():
                        if dfs(i + 1, child):
                            return True
                    return False
                else:
                    if c not in cur.children:
                        return False
                    cur = cur.children[c]
            return cur.word

        return dfs(0, self.root)
        
        
class WordDictionary(object):

    def __init__(self):
        self.dict, self.len2word  = defaultdict(set), defaultdict(set)

    def addWord(self, word):
        # self.dict: key is combination of index and character, value is a word set whose i-th letter is c
        for i, c in enumerate(word): self.dict[(i, c)].add(word)
        # self.len2word: key is length of word, value is a word set whose length is equal to key
        self.len2word[len(word)].add(word)

    def search(self, word):
        ans = copy.deepcopy(self.len2word[len(word)])
        for i, c in enumerate(word):
            if c != '.': ans &= self.dict[(i, c)]
        return True if len(ans) else False
        
        
        
class TrieNode:
    def __init__(self):
        self.children = dict()
        self.is_word = False

class WordDictionary:

    def __init__(self):
        self.root = TrieNode() # instantiate Trie data structure

    def addWord(self, word: str) -> None:
        node = self.root
        for char in word:
		    # add a character to the children of node if it doesn't already exist in the children dictionary, then traverse to this child node
            node = node.children.setdefault(char, TrieNode()) 
        node.is_word = True
        
    def search(self, word: str) -> bool:
        queue = [self.root]
        for char in word: 
            tmp = [] # append new nodes to this temporary queue
            for node in queue: # for a sinlge char, bfs over the possible nodes (due to the wildcard '.')
                if char == '.': # if the char is a wildcard, append all child nodes into a queue to bfs at next iteration.
                    for child in node.children:
                        tmp.append(node.children[child])
                elif node.children.get(char): # if the char is found, keep going deeper into its children
					# Keep adding to tmp array when wildcard '.' results in nodes with the same char appearing. 
					# e.g., suppose adding two words 'abc' and 'cbd'. When searching for '.bc', 
					# both word nodes will be appended as candidates at the node.children['b']
                    tmp.append(node.children[char]) 
            queue = tmp # the newly appended queue to bfs over in the next iteration
        return any([node.is_word for node in queue])    
