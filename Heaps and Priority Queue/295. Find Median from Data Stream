//Python


The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.

For example, for arr = [2,3,4], the median is 3.
For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.
Implement the MedianFinder class:

MedianFinder() initializes the MedianFinder object.
void addNum(int num) adds the integer num from the data stream to the data structure.
double findMedian() returns the median of all elements so far. Answers within 105 of the actual answer will be accepted.
Example 1:

Input
["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]
[[], [1], [2], [], [3], []]
Output
[null, null, null, 1.5, null, 2.0]

Explanation
MedianFinder medianFinder = new MedianFinder();
medianFinder.addNum(1);    // arr = [1]
medianFinder.addNum(2);    // arr = [1, 2]
medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)
medianFinder.addNum(3);    // arr[1, 2, 3]
medianFinder.findMedian(); // return 2.0

Constraints:

105 <= num <= 105
There will be at least one element in the data structure before calling findMedian.
At most 5 * 104 calls will be made to addNum and findMedian.
Brainstorming
We are given a stream of numbers coming in random order and we need to find the median of the numbers as if they were ordered. So

numbers coming in 4,3,2,1,5 median of this will be
First we order the numbers coming in [1,2,3,4,5]
Median is the the value at the midpoint in a sorted array.
So in this case it will be 3
However there is a caveat when the array is even the median becomes the average of the two values near the middle.
[1,2,3,4] median = (2+3)/2 = 2.5
Now we dissected the question how can we go about solving it, A common method is that we can keep putting numbers in an array and every time we put a number in the array we sort the array. Adding an item in a sorted array will cost us a time complexity of O(n) as we will have to go over the whole array. And to add a value we will have to move all the values in the array one index ahead.

[1,2,3,4,5 ] add 3 [1,2,3,3,4,5] will have to go over all the values until we have found the sorted position for 3 and then will have to move positions 3 will come in the place of 4 and 4 will have to be moved.See how this can get really time complex.
What do you think is a better solution for this, what if we divided the numbers coming in into two arrays one having the smaller set of numbers and the other having the larger set of numbers, after equalizing for the median.

even [1,2,3,4] —> can be either [1,2] [3,4]
Median is the sum divided by 2 of the largest value in the smaller array and the smallest value of the set of larger numbers.
odd [1,2,3,4,5] —> it can be either [1,2,3] [4,5] or [1,2] [3,4,5]
Median in the odd case is the largest value if the array with a smaller set of numbers is larger(by 1 ) and the smallest value if the array with the set of larger numbers is larger in length(by 1).
Now you have seen how we can keep the order the numbers in the two separate arrays, what structure in your eyes is appropriate to get the max and the mins of separate arrays. Heaps anyone. Yes we will use heaps.

How is heaps implemented in python

Implementing a min heap requires you to use heapq.

There are only min heaps in python

#initiated as a list
minheap = []
heapq.heappush(minheap,1)

# to convert it into a max heap we just multiply the values by -1 so
# the largest value becomes the smallest value and the min heap in python is able to get
# that for you 

maxheap = []
heapq.heappush(minheap,1 * -1)
maxheap[0] # the smallest value is stored at the first index 
This is a little counter intuitive as we our smaller set of numbers heap is a max heap but is called small

#small = maxheap
#large = minheap 
small,large = [],[]
We will add the incoming number by default to the small array.

heapq.heappush(small,-1* incomingNumber) # -1 as this is a max heap
But not so fast we need to maintain the sizes of the two array as we are adding different number into them. What are a few conditions we need to maintain. As we add the numbers to the small array

All the numbers in the smaller heap need to be less than those in the larger heap.


class MedianFinder:
    def __init__(self):
        """
        initialize your data structure here.
        """
        # two heaps, large, small, minheap, maxheap
        # heaps should be equal size
        self.small, self.large = [], []  # maxHeap, minHeap (python default)

#pas trop de sens dans le code
    def addNum(self, num: int) -> None:
        heapq.heappush(self.small, -1 * num)

        if self.small and self.large and (-1 * self.small[0]) > self.large[0]:
            val = -1 * heapq.heappop(self.small)
            heapq.heappush(self.large, val)

        if len(self.small) > len(self.large) + 1:
            val = -1 * heapq.heappop(self.small)
            heapq.heappush(self.large, val)
        if len(self.large) > len(self.small) + 1:
            val = heapq.heappop(self.large)
            heapq.heappush(self.small, -1 * val)

    def findMedian(self) -> float:
        if len(self.small) > len(self.large):
            return -1 * self.small[0]
        elif len(self.large) > len(self.small):
            return self.large[0]
        return (-1 * self.small[0] + self.large[0]) / 2
   


from heapq import *


class MedianFinder:
    def __init__(self):
        self.small = []  # the smaller half of the list, max heap (invert min-heap)
        self.large = []  # the larger half of the list, min heap

    def addNum(self, num):
        if len(self.small) == len(self.large):
            heappush(self.large, -heappushpop(self.small, -num))
        else:
            heappush(self.small, -heappushpop(self.large, num))

    def findMedian(self):
        if len(self.small) == len(self.large):
            return float(self.large[0] - self.small[0]) / 2.0
        else:
            return float(self.large[0])

# 18 / 18 test cases passed.
# Status: Accepted
# Runtime: 388 ms



"""
        ## RC ##
        ## APPROACH : 2 HEAPS ##
        ## LOGIC ##
        ## One minheap to store low values and second maxheap to store max values, we keep track and update median every time after insertion ##
        
		## TIME COMPLEXITY : O(logN) ##
		## SPACE COMPLEXITY : O(N) ##

        ## EXAMPLE ##
        Adding number 41
        MaxHeap lo: [41]           // MaxHeap stores the largest value at the top (index 0)
        MinHeap hi: []             // MinHeap stores the smallest value at the top (index 0)
        Median is 41
        =======================
        Adding number 35
        MaxHeap lo: [35]          // max heap stores smaller half of nums
        MinHeap hi: [41]          // min heap stores bigger half of nums
        Median is 38
        =======================
        Adding number 62
        MaxHeap lo: [41, 35]
        MinHeap hi: [62]
        Median is 41
        =======================
        Adding number 4
        MaxHeap lo: [35, 4]
        MinHeap hi: [41, 62]
        Median is 38
        =======================
        Adding number 97
        MaxHeap lo: [41, 35, 4]
        MinHeap hi: [62, 97]
        Median is 41
        =======================
        Adding number 108
        MaxHeap lo: [41, 35, 4]
        MinHeap hi: [62, 97, 108]
        Median is 51.5
"""

class MedianFinder:
    def __init__(self):
        self.lo = []  
        self.hi = []  

    def addNum(self, num):
        heappush(self.lo, -num)             # lo is maxheap, so -1 * num
        heappush(self.hi, -self.lo[0])      # hi is minheap
        heappop(self.lo)
        
        if len(self.lo) < len(self.hi):
            heappush(self.lo, -self.hi[0])
            heappop(self.hi)
            
    def findMedian(self):
        if len(self.lo) > len(self.hi):
            return -self.lo[0]                  
        else:
            return (self.hi[0] - self.lo[0]) / 2  # - as low has -ve values
