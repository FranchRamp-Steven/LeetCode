//Python


// basic

class user:
    def __init__(self):
        self.followees = set()
        
class Twitter:
    def __init__(self):
        self.users = defaultdict(user)
        self.tweets = []
    
    def createUser(self, userId):
        if userId not in self.users:
            self.users[userId] = user()

    def postTweet(self, userId: int, tweetId: int) -> None:
        self.tweets.append([userId, tweetId])

    def getNewsFeed(self, userId: int) -> List[int]:
        self.createUser(userId)
        res = []
        for _userId, _tweetId in reversed(self.tweets):
            if _userId == userId or _userId in self.users[userId].followees:
                res.append(_tweetId)
                if len(res) == 10: break
        return res

    def follow(self, followerId: int, followeeId: int) -> None:
        self.createUser(followerId)
        self.users[followerId].followees.add(followeeId)

    def unfollow(self, followerId: int, followeeId: int) -> None:
        if followeeId in self.users[followerId].followees:
            self.users[followerId].followees.remove(followeeId)
            
            
            
            
class User:
    def __init__(self, userId):
        self.userId = userId
        self.tweets = {}
        self.followers = set()
        self.follows = set()


class Twitter(object):

    def __init__(self):
        self.users = {}
        self.time = 0

    def create(self, userid):
        
        if userid not in self.users:
            self.users[userid] = User(userid)

    def postTweet(self, userId, tweetId):
        """
        :type userId: int
        :type tweetId: int
        :rtype: None
        """
        self.create(userId)
        self.users[userId].tweets[tweetId] = self.time
        self.time += 1

    def getNewsFeed(self, userId):
        """
        :type userId: int
        :rtype: List[int]
        """
        feed = []
        temp = []
        self.create(userId)
        for i in self.users[userId].tweets:
            temp.append([i, self.users[userId].tweets[i]])
        for i in self.users[userId].follows:
            print(i.tweets)
            for j in i.tweets:
                temp.append([j, i.tweets[j]])
        temp.sort(key=lambda x:x[1], reverse=True)

        for i in temp:
            feed.append(i[0])
        return feed[:10]

    def follow(self, followerId, followeeId):
        """
        :type followerId: int
        :type followeeId: int
        :rtype: None
        """
        self.create(followerId)
        self.create(followeeId)
        self.users[followerId].follows.add(self.users[followeeId])
        self.users[followeeId].followers.add(self.users[followerId])

    def unfollow(self, followerId, followeeId):
        """
        :type followerId: int
        :type followeeId: int
        :rtype: None
        """
        self.create(followerId)
        self.create(followeeId)
        if self.users[followerId] in self.users[followeeId].followers:
            self.users[followeeId].followers.remove(self.users[followerId])
            self.users[followerId].follows.remove(self.users[followeeId])
            
            
from heapq import *
from collections import defaultdict, deque
class Twitter:

    # Each user has a separate min heap
    # if size of heap is lesser than 10 keep pushing tweets and when it's full, poppush
    # use a defaultdict to associate user id's to their heaps
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.following = defaultdict(set)
        self.user_tweets = defaultdict(deque)
        self.post = 0

    def postTweet(self, userId, tweetId):
        """
        Compose a new tweet.
        """
        self.post += 1
        tweets = self.user_tweets[userId]
        tweets.append(((self.post), tweetId))
        if len(tweets) > 10:
            tweets.popleft()
        

    def getNewsFeed(self, userId):
        """
        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.
        """
        h = []
        u = self.user_tweets[userId]
		h.extend(u)
        heapify(h)
        for user in self.following[userId]:
            tweets = self.user_tweets[user]
            for x in range(len(tweets) - 1, -1, -1):
                if len(h) < 10:
                    heappush(h, tweets[x])
                else:
                    if h[0][0] < tweets[x][0]:
                        heappushpop(h, tweets[x])
                    else:
                        break
        return [heappop(h)[1] for x in range(len(h))][::-1]

    def follow(self, followerId, followeeId):
        """
        Follower follows a followee. If the operation is invalid, it should be a no-op.
        """
        if followerId != followeeId:
            self.following[followerId].add(followeeId)

    def unfollow(self, followerId, followeeId):
        """
        Follower unfollows a followee. If the operation is invalid, it should be a no-op.
        """
        if followerId != followeeId:
                self.following[followerId].discard(followeeId)
                
                
                
Here is the explanation of heapq.merge(*(...)):

(self.tweets[u] for u in self.followees[userId] | {userId}) gives you an array of heads of tweet lists.
* unpacks each element of the above array into a function call heapq.merge(). Basically, each element of the array is now a separate argument.
heapq.merge merges all given lists heads into one min heap.

class Twitter(object):

    def __init__(self):
        self.timer = itertools.count(step=-1)
        self.tweets = collections.defaultdict(collections.deque)
        self.followees = collections.defaultdict(set)

    def postTweet(self, userId, tweetId):
        self.tweets[userId].appendleft((next(self.timer), tweetId))

    def getNewsFeed(self, userId):
        tweets = heapq.merge(*(self.tweets[u] for u in self.followees[userId] | {userId}))
        return [t for _, t in itertools.islice(tweets, 10)]

    def follow(self, followerId, followeeId):
        self.followees[followerId].add(followeeId)

    def unfollow(self, followerId, followeeId):
        self.followees[followerId].discard(followeeId)
        
        
        
class Twitter:
    def __init__(self):
        self.count = 0
        self.tweetMap = defaultdict(list)  # userId -> list of [count, tweetIds]
        self.followMap = defaultdict(set)  # userId -> set of followeeId

    def postTweet(self, userId: int, tweetId: int) -> None:
        self.tweetMap[userId].append([self.count, tweetId])
        self.count -= 1

    def getNewsFeed(self, userId: int) -> List[int]:
        res = []
        minHeap = []

        self.followMap[userId].add(userId)
        for followeeId in self.followMap[userId]:
            if followeeId in self.tweetMap:
                index = len(self.tweetMap[followeeId]) - 1
                count, tweetId = self.tweetMap[followeeId][index]
                heapq.heappush(minHeap, [count, tweetId, followeeId, index - 1])

        while minHeap and len(res) < 10:
            count, tweetId, followeeId, index = heapq.heappop(minHeap)
            res.append(tweetId)
            if index >= 0:
                count, tweetId = self.tweetMap[followeeId][index]
                heapq.heappush(minHeap, [count, tweetId, followeeId, index - 1])
        return res

    def follow(self, followerId: int, followeeId: int) -> None:
        self.followMap[followerId].add(followeeId)

    def unfollow(self, followerId: int, followeeId: int) -> None:
        if followeeId in self.followMap[followerId]:
            self.followMap[followerId].remove(followeeId)
