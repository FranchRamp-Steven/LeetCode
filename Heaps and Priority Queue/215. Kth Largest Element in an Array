//Python

# O(nlgn) time
def findKthLargest1(self, nums, k):
    return sorted(nums, reverse=True)[k-1]
    
# O(nk) time, bubble sort idea, TLE
def findKthLargest2(self, nums, k):
    for i in xrange(k):
        for j in xrange(len(nums)-i-1):
            if nums[j] > nums[j+1]:
                # exchange elements, time consuming
                nums[j], nums[j+1] = nums[j+1], nums[j]
    return nums[len(nums)-k]
    
# O(nk) time, selection sort idea
def findKthLargest3(self, nums, k):
    for i in xrange(len(nums), len(nums)-k, -1):
        tmp = 0
        for j in xrange(i):
            if nums[j] > nums[tmp]:
                tmp = j
        nums[tmp], nums[i-1] = nums[i-1], nums[tmp]
    return nums[len(nums)-k]
 
# O(k+(n-k)lgk) time, min-heap WRONG O(nlgn)
def findKthLargest4(self, nums, k):
    heap = []
    for num in nums:
        heapq.heappush(heap, num)
    for _ in xrange(len(nums)-k):
        heapq.heappop(heap)
    return heapq.heappop(heap)

GOOD
def findKthLargest4(self, nums, k):
        heap = nums[:]        
        heapq.heapify(heap)
        for _ in xrange(len(heap)-k):
            heapq.heappop(heap)
        return heapq.heappop(heap)
    
heap = nums[:] is just taking a copy of the input. heapq.heapify is where it takes linear time, the original solution builds the heap incrementally,
and each iteration takes logn, and the whole heap building process takes nlogn. Hope it's clear enough.
    
# Kth largest element in an array - Time: O(k + (n-k) log k), space: O(k)

I think its correct. Building a heap of size K will take O(k) time and then for (N-K) elements 
you will do heapify(logK) so it will be (N-K)logK. Space will be O(k) since we are storing K elements in the heap.

class Solution:
    def findKthLargest(self, nums, k):
        # minheap
        array = nums[:k] 
        heapq.heapify(array)
        for num in nums[k:]:
            if num > array[0]:
                heapq.heapreplace(array, num)
        return array[0]
    
    
def findKthLargest(self, nums, k):
    heap = nums[:k]
    heapify(heap)
    for n in nums[k:]:
        heappushpop(heap, n)
    return heap[0]

# O(k+(n-k)lgk) time, min-heap        
def findKthLargest5(self, nums, k):
    return heapq.nlargest(k, nums)[-1]
    
# O(n) time, quick selection
APP4: quick select, find a pivot, move all nums that is smaller than it to it's left, all nums > pivot to it's right. 
check how many on the left. if count == k, return, if count > k, it must be on the left, otherwise on the right.
#     Time: O(n) average, O(n^2) worst case Space: O(1) Runtime: 99%

from random import randint
class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        def partition(l, r):
            ri = randint(l, r)
            nums[r], nums[ri] = nums[ri], nums[r]
            for i, v in enumerate(nums[l: r+1], l):
                if v >= nums[r]:
                    nums[l], nums[i] = nums[i], nums[l]
                    l += 1
            return l - 1
        
        l, r, k = 0, len(nums) - 1, k - 1
        while True:
            pos = partition(l, r)
            if pos < k:
                l = pos + 1
            elif pos > k:
                r = pos - 1
            else:
                return nums[pos]


or

def findKthLargest(self, nums, k):
    # convert the kth largest to smallest
    return self.findKthSmallest(nums, len(nums)+1-k)

def findKthSmallest(self, nums, k):
    if nums:
        pos = self.partition(nums, 0, len(nums)-1)
        if k > pos+1:
            return self.findKthSmallest(nums[pos+1:], k-pos-1)
        elif k < pos+1:
            return self.findKthSmallest(nums[:pos], k)
        else:
            return nums[pos]
 
# choose the right-most element as pivot   
def partition(self, nums, l, r):
    low = l
    while l < r:
        if nums[l] < nums[r]:
            nums[l], nums[low] = nums[low], nums[l]
            low += 1
        l += 1
    nums[low], nums[r] = nums[r], nums[low]
    return low
