//Java -- Optimised solution (of the C++ below)

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList();
        if(nums.length<3) return res;
        Arrays.sort(nums);
        for(int i = 0; i<nums.length-2; i++){
            if(nums[i]>0) break;
            if(i==0||(i>0)&&(nums[i]!=nums[i-1])){
                int lo=i+1,hi=nums.length-1, sum=0-nums[i];
                while(lo<hi){
                    if(nums[lo]+nums[hi]==sum){
                        res.add(Arrays.asList(nums[i],nums[lo],nums[hi]));
                        while(lo<hi&&nums[lo]==nums[lo+1]) lo++;
                        while(lo<hi&&nums[hi]==nums[hi-1]) hi--;
                        lo++;
                        hi--;
                    }
                    else if(nums[lo]+nums[hi]<sum) lo++;
                    else hi--;
                }                    
            }
        }
    return res;
    }
}

//C++

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());
        
        int L;
        int R;
        int sum;
        int l = nums.size();

        for(int i = 0; i < l - 2;i++){
            
            if(i > 0 and nums[i] == nums[i-1]) continue;
            
            L = i+1;
            R = l-1;
            
            while(L < R){
                
                sum = nums[i] + nums[L] + nums[R];
                
                if(sum > 0) R-=1;
                else if(sum < 0) L+=1;
                else{
                    ans.push_back({nums[i], nums[L], nums[R]});
                    L+=1;
                    while(nums[L] == nums[L-1] and L < R) {
                        L+=1;
                    }
                }
                
            }
        }

        return ans;
    }
};
