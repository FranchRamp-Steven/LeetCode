//Python

class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        res = [root.val]

        # return max path sum without split
        def dfs(root):
            if not root:
                return 0

            leftMax = dfs(root.left)
            rightMax = dfs(root.right)
            leftMax = max(leftMax, 0)
            rightMax = max(rightMax, 0)

            # compute max path sum WITH split
            res[0] = max(res[0], root.val + leftMax + rightMax)
            return root.val + max(leftMax, rightMax)

        dfs(root)
        return res[0]
        
        
class Solution:
    def __init__(self):
        self.maxSum = float('-inf')
    def maxPathSum(self, root: TreeNode) -> int:
        def traverse(root):
            if root:
                left = traverse(root.left)
                right = traverse(root.right)
                self.maxSum = max(self.maxSum,root.val, root.val + left, root.val + right, root.val + left + right)
                return max(root.val,root.val + left,root.val + right)
            else:
                return 0
        traverse(root)
        return self.maxSum
        
        
def maxPathSum(self, root):
    def maxsums(node):
        if not node:
            return [-2**31] * 2
        left = maxsums(node.left)
        right = maxsums(node.right)
        return [node.val + max(left[0], right[0], 0),
                max(left + right + [node.val + left[0] + right[0]])]
    return max(maxsums(root))
My helper function returns two values:

The max sum of all paths ending in the given node (can be extended through the parent)
The max sum of all paths anywhere in tree rooted at the given node (can not be extended through the parent).

It's actually a variant of Kadane's algorithm.

class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        def backtracking(node: TreeNode) -> tuple:
            if not node: return float('-inf'), 0
            left_so_far, left_ending_here = backtracking(node.left)
            right_so_far, right_ending_here = backtracking(node.right)
            max_so_far = max(left_so_far, right_so_far,
                             node.val + left_ending_here + right_ending_here)
            max_ending_here = max(0, node.val + max(left_ending_here, right_ending_here))
            return max_so_far, max_ending_here

        return backtracking(root)[0]
