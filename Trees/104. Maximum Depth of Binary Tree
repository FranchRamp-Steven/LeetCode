//Python

class Solution:
    def maxDepth(self, root: Optional[TreeNode], size = 0) -> int:
        if root == None: return size
        return max(self.maxDepth(root.left,size + 1), self.maxDepth(root.right,size + 1))
        
ou

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if root is None:
            return 0
        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))
        
ou

class Solution:
    def maxDepth(self, node: TreeNode) -> int:
        if node is None:
            return 0

        return max(self.maxDepth(node.left) + 1, self.maxDepth(node.right) + 1)
        
        
Python BFS solution.

class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        q=collections.deque()
        q.append((root,1))
        while len(q)>0:
            node,depth=q.popleft()            
            if not node.left and not node.right and not q:
                return depth
            if node.left:
                q.append((node.left,depth+1))
            if node.right:
                q.append((node.right, depth+1))
                
                
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        q = deque()
        if root:
            q.append(root)

        level = 0

        while q:

            for i in range(len(q)):
                node = q.popleft()
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            level += 1
        return level


Python DFS solution

class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        if not root.left and not root.right:
            return 1
        if root.left and not root.right:
            return 1+self.maxDepth(root.left)
        if root.right and not root.left:
            return 1+self.maxDepth(root.right)
        return 1+max(self.maxDepth(root.left),self.maxDepth(root.right))


Another approach for DFS solution

class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        
        if root ==None:
            return 0
        left=self.maxDepth(root.left)
        right=self.maxDepth(root.right)
        return max(left,right)+1
 
 
Python iterative DFS with run time O(T), space O(T)
    def maxDepth(self, root: TreeNode) -> int:
        ans = 0
        if not root:
            return 0
        DFS = [] # stack
        DFS.append((root,1))
        while DFS:
            root, depth = DFS.pop()
            if depth > ans:
                ans = depth
            if root.left:
                DFS.append((root.left, depth + 1))
            if root.right:
                DFS.append((root.right, depth + 1))
        return ans
