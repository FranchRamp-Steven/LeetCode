//Python

no viable for condition but good idea

def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if root == None:
            return None
        
        dict = {'value':root.val,'left':None,'right':None}
        
        if root.left:
            dict['left'] = self.serialize(root.left)
        if root.right:
            dict['right'] = self.serialize(root.right)
            
        return dict
        

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if data == None:
            return None
        
        node = TreeNode(data['value'])
        
        node.left = self.deserialize(data['left'])
        
        node.right = self.deserialize(data['right'])
        
        return node
        

The only thing I might criticize is this part : self.data[self.data.find(',')+1:] .
You reintialize a new array each time you go down in your recursion (meaning you do in total n-1+n-2+n-3..+1
= O(nÂ²) by the time you get to your last node)

We could use a queue like this instead :

from collections import deque
class Codec:
    def serialize(self, root):
        if not root: return 'x'
        return ','.join([str(root.val), self.serialize(root.left), self.serialize(root.right)])

    def deserialize(self, data):
        q = deque()
        q.extend(data.split(","))
        self.data = q
        root = self.deserialize_helper()
        return root
        
    def deserialize_helper(self):
        if self.data[0] == 'x':
            self.data.popleft()
            return None
        node = TreeNode(self.data.popleft()) 
        node.left = self.deserialize_helper()
        node.right = self.deserialize_helper()
        return node
        
        
class Codec:
    def serialize(self, root):
        # take care of base cases
        # if a node is empty, add 'x' to string
        # you can set 'x' to any mark as you want
        if not root: return 'x'
        # preoder(Root->left->right)
        # ex,
        #     1
        #    / \
        #   2   3
        #      / \
        #     4   5 
        # 
        # return (1, (2, 'x', 'x'), (3, (4, 'x', 'x'), (5, 'x', 'x')))
        # if you look at the return statement very closely, it is actually very intuitive
        # for value 1, you have 2 as left child and 3 as right child
        # for value 2, you have 'x'(None) as left child and 'x'(None) as right child which indicates it is a leaf node
        return root.val, self.serialize(root.left), self.serialize(root.right)

    def deserialize(self, data):
        #######################INTUITION#########################
        # The initial data string will be something like below:
        # (1, (2, 'x', 'x'), (3, (4, 'x', 'x'), (5, 'x', 'x')))
        # if you loop through string: 
        # 1                                 -> this is node value
        # (2, 'x', 'x')                     -> this is node left
        # (3, (4, 'x', 'x'), (5, 'x', 'x')) -> this is node right
        ########################################################
        # always take care of base case: if the node's value is 'x' then return None
        if data[0] == 'x': return None
        # create new treenode for node value
        node = TreeNode(data[0])
        # do the recursive to unpack string value
        node.left = self.deserialize(data[1])
        node.right = self.deserialize(data[2])
        # return the new TreeNode that we just created
        return node
code without comments

def serialize(self, root):
        if not root: return 'x'
        return root.val, self.serialize(root.left), self.serialize(root.right)

def deserialize(self, data):
	if data[0] == 'x': return None
	node = TreeNode(data[0])
	node.left = self.deserialize(data[1])
	node.right = self.deserialize(data[2])
	return node
Hope it helps! Likes and comments are welcome

05/07/2020 update:
Returning string instead of tuple.
I tried to maintain the coding style as similar as possible to above solution.

class Codec:
    def serialize(self, root):
        if not root: return 'x'
        return ','.join([str(root.val), self.serialize(root.left), self.serialize(root.right)])

    def deserialize(self, data):
		# The reason I use self.data in the deserialize is, data stream will be consumed  as we build left side of Tree
		# by the time when the right side is building up, we need to hold what is left over.
		# Therefore, self.data is a global value, right side will use what is left over after tree is partially built
        self.data = data
        if self.data[0] == 'x': return None
        node = TreeNode(self.data[:self.data.find(',')]) 
        node.left = self.deserialize(self.data[self.data.find(',')+1:])
        node.right = self.deserialize(self.data[self.data.find(',')+1:])
        return node
        
        
in dfs: serialize result is: 1 2 n n 3 4 n n 5 n n
use 'n' None node and also use 'n' as the base case of recursion
in bfs: serialize result is: 1 2 3 n n 4 5 n n n n

    def serialize_dfs(self, root):
        if root is None:
            return ''
        def dfs(root_node):
            if root_node is None:
                nodes.append('n')
                return
            nodes.append(str(root_node.val))
            dfs(root_node.left)
            dfs(root_node.right)

        if root is None:
            return ''
        nodes = []
        dfs(root)
        return ','.join(nodes)

    def deserialize_dfs(self, data):
        """Decodes your encoded data to tree.
        :type data: str
        :rtype: TreeNode
        """
        if len(data) == 0:
            return None
        nodes = data.split(',')
        def dfs():
            if nodes[cur_pos[0]] == 'n':
                cur_pos[0] += 1
                return None
            root = TreeNode(int(nodes[cur_pos[0]]))
            cur_pos[0] += 1
            root.left = dfs()
            root.right = dfs()
            return root
        cur_pos = [0]
        return dfs()

    def serialize_bfs(self, root):
        """Encodes a tree to a single string.
        :type root: TreeNode
        :rtype: str
        """
        if root is None:
            return ''
        queue = deque()
        queue.append(root)
        nodes = []
        while len(queue) > 0:
            cur_node = queue.popleft()
            if cur_node is None:
                nodes.append('n')
                continue
            else:
                nodes.append(str(cur_node.val))
            queue.append(cur_node.left)
            queue.append(cur_node.right)
        return ','.join(nodes)



    def deserialize_bfs(self, data):
        """Decodes your encoded data to tree.
        :type data: str
        :rtype: TreeNode
        """
        if len(data) == 0:
            return None
        nodes = data.split(',')
        root_node = TreeNode(int(nodes[0]))
        queue = deque()
        queue.append(root_node)
        cur_pos = 1
        while len(queue) > 0:
            cur = queue.popleft()
            if nodes[cur_pos] != 'n':
                cur.left = TreeNode(int(nodes[cur_pos]))
                queue.append(cur.left)
            cur_pos += 1
            if nodes[cur_pos] != 'n':
                cur.right = TreeNode(int(nodes[cur_pos]))
                queue.append(cur.right)
            cur_pos += 1
        return root_node
        
        
        
        
        
