//Python
 
 https://en.wikipedia.org/wiki/Tree_traversal
 
 DFS - recursive
 
 class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        if t is None: return True
        def dfs(p, q):
            if not p and not q: return True
            if not p or not q or p.val != q.val: return False
            return dfs(p.left, q.left) and dfs(p.right, q.right)        
        
        def find(s, t):
            if s is None: return False
            if dfs(s, t): return True
            return find(s.left, t) or find(s.right, t)
        
        return find(s, t)
 
 DFS - iterative
 
 class Solution:
    
    def is_identical(self,root1,root2):
        stack = [(root1,root2)]
        
        while stack:
            cur1, cur2 = stack.pop()
            if cur1 and cur2:
                if cur1.val != cur2.val:
                    return False
                stack.append((cur1.left,cur2.left))
                stack.append((cur1.right,cur2.right))
                
            elif cur1 or cur2:
                return False

        return True
    
    
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        
        stack = [root]
        
        while stack:
            cur = stack.pop()
            if self.is_identical(cur,subRoot):
                return True
            if cur.left:
                stack.append(cur.left)
            if cur.right:
                stack.append(cur.right)
            
        return False

BFS - 



 Tree Hash v1
  
 it will fail for node values like "2" and "12" for example.

For a single node tree with value 2, traverse_tree will return "2 None None"
For a single node tree with value 12, traverse_tree will return "12 None None"

"2 None None" IS a substring of "12 None None", so the usecase fails.

Adding any symbol in front of the value of the node fixes this issue.


 def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        def traverse_tree(node):
            if not node: return None
            return f"#{node.val} {traverse_tree(node.left)} {traverse_tree(node.right)}"
        return traverse_tree(t) in traverse_tree(s)
 
 v2
 
 class Solution:
    def isSubtree(self, root: TreeNode, subRoot: TreeNode) -> bool:

        MOD_1 = 1_000_000_007
        MOD_2 = 2_147_483_647

        def hash_subtree_at_node(node, need_to_add):
            if node is None:
                return (3, 7)

            left = hash_subtree_at_node(node.left, need_to_add)
            right = hash_subtree_at_node(node.right, need_to_add)

            left_1 = (left[0] << 5) % MOD_1
            right_1 = (right[0] << 1) % MOD_1
            left_2 = (left[1] << 7) % MOD_2
            right_2 = (right[1] << 1) % MOD_2

            hashpair = ((left_1 + right_1 + node.val) % MOD_1,
                        (left_2 + right_2 + node.val) % MOD_2)

            if need_to_add:
                memo.add(hashpair)

            return hashpair

        # List to store hashed value of each node.
        memo = set()

        # Calling and adding hash to List
        hash_subtree_at_node(root, True)

        # Storing hashed value of subRoot for comparison
        s = hash_subtree_at_node(subRoot, False)

        # Check if hash of subRoot is present in memo
        return s in memo
        
BFS with level
class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        if t is None: return True
        def same(p, q):
            if not p and not q: return True
            if not p or not q or p.val != q.val: return False
            return same(p.left, q.left) and same(p.right, q.right)    
        
        stack = collections.deque([s])
        pre = []
        while stack:
            for _ in range(len(stack)):
                s = stack.popleft()
                pre.append(s)
                if s.left: stack.append(s.left)
                if s.right: stack.append(s.right)
        
        same_tree = partial(same, q=t)
        if any(map(same_tree, reversed(pre))): return True
        return False
        
BFS with preorder
class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        if t is None: return True

        def same(p, q):
            if not p and not q: return True
            if not p or not q or p.val != q.val: return False
            return same(p.left, q.left) and same(p.right, q.right)        

        stack = []
        pre = []
        while stack or s:
            while s:
                pre.append(s) # if s.val == t.val else None # seems the pruning is not work at all
                stack.append(s)
                s = s.left
            s = stack.pop()
            s = s.right
        same_tree = partial(same, q=t)
        if any(map(same_tree, reversed(pre))): return True
        # for s in pre:
        #     if same(s, t): return True
        return False
        
BFS with inorder
class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        if t is None: return True

        def same(p, q):
            if not p and not q: return True
            if not p or not q or p.val != q.val: return False
            return same(p.left, q.left) and same(p.right, q.right)        

        stack = []
        pre = []
        while stack or s:
            while s:
                #pre.append(s) # if s.val == t.val else None # seems the pruning is not work at all
                stack.append(s)
                s = s.left
            s = stack.pop()
			pre.append(s)
            s = s.right
        same_tree = partial(same, q=t)
        if any(map(same_tree, reversed(pre))): return True
        # for s in pre:
        #     if same(s, t): return True
        return False
        
BFS with postorder
class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        if t is None: return True
        def same(p, q):
            if not p and not q: return True
            if not p or not q or p.val != q.val: return False
            return same(p.left, q.left) and same(p.right, q.right)        
     
        # check post order
        stack = [s]
        pre = []
        while stack:
            s = stack.pop()
            pre.append(s) # reversed pre will be true postorder
            if s.left: stack.append(s.left)
            if s.right: stack.append(s.right)
        same_tree = partial(same, q=t)
        if any(map(same_tree, reversed(pre))): return True
        return False
        
        
   
