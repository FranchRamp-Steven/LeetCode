//Python

inorder traversal

reursive

class Solution:
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        def inorder(r):
            return inorder(r.left) + [r.val] + inorder(r.right) if r else []
    
        return inorder(root)[k - 1]

Complexity Analysis

Time complexity : O(N) to build a traversal.
Space complexity :  O(N) to keep an inorder traversal.


improve

def kthSmallest(self, root, k):
    self.k = k
    self.res = None
    self.helper(root)
    return self.res

def helper(self, node):
    if not node:
        return
    self.helper(node.left)
    self.k -= 1
    if self.k == 0:
        self.res = node.val
        return
    self.helper(node.right)

iterative

class Solution:
    def kthSmallest(self, root: TreeNode, k: int) -> int:
        curr, head = root

        while head:
            while curr:
                stack.append(curr)
                curr = curr.left
            curr = stack.pop()
            k -= 1
            if k == 0:
                return curr.val
            curr = curr.right
            
Time complexity: O(H+k), where H is a tree height. 
This complexity is defined by the stack, which contains at least H+k elements, 
since before starting to pop out one has to go down to a leaf. 
This results in O(logN+k) for the balanced tree and O(N+k) for completely unbalanced tree with all the nodes in the left subtree.

Space complexity: O(H) to keep the stack, where H is a tree height. 
That makes O(N) in the worst case of the skewed tree, and O(logN) in the average case of the balanced tree.


# Binary search iterative
class Solution(object):
    def kthSmallest(self, root, k):
        count = self.get_nodes(root.left)
        while count + 1 != k:
            if count + 1 < k:
                root = root.right
                k = k - count - 1
            else:
                root = root.left
            count = self.get_nodes(root.left)
        return root.val

    def get_nodes(self, root):
        if not root:
            return 0
        return 1 + self.get_nodes(root.left) + self.get_nodes(root.right)


# Binary search recursive
class Solution_2(object):
    def kthSmallest(self, root, k):
        count = self.get_nodes(root.left)
        if count+1 < k:
            return self.kthSmallest(root.right, k-count-1)
        elif count+1 == k:
            return root.val
        else:
            return self.kthSmallest(root.left, k)

    def get_nodes(self, root):
        if not root:
            return 0
        return 1 + self.get_nodes(root.left) + self.get_nodes(root.right)


# DFS in-order iterative:
class Solution_3(object):
    def kthSmallest(self, root, k):
        node_stack = []
        count, result = 0, 0
        while root or node_stack:
            if root:
                node_stack.append(root)
                root = root.left
            else:
                if node_stack:
                    root = node_stack.pop()
                    result = root.val
                    count += 1
                    if count == k:
                        return result
                    root = root.right

        return -1   # never hit if k is valid


# DFS in-order recursive:
class Solution_4(object):
    def kthSmallest(self, root, k):
        self.k = k
        self.num = 0
        self.in_order(root)
        return self.num

    def in_order(self, root):
        if root.left:
            self.in_order(root.left)
        self.k -= 1
        if self.k == 0:
            self.num = root.val
            return
        if root.right:
            self.in_order(root.right)


# DFS in-order recursive, Pythonic approach with generator:
class Solution_5(object):
    def kthSmallest(self, root, k):
        for val in self.in_order(root):
            if k == 1:
                return val
            else:
                k -= 1

    def in_order(self, root):
        if root:
            for val in self.in_order(root.left):
                yield val
            yield root.val
            for val in self.in_order(root.right):
                yield val
