//Python

DFS - recursive

class Solution:
    def isSameTree(self, p, q):
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """    
        # p and q are both None
        if not p and not q:
            return True
        # one of p and q is None
        if not q or not p or p.val != q.val:
            return False
 
        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right) 
        
def isSameTree(self, p, q):
    if p and q:
        return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)
    return p is q
        
    p is q : It's just to return True if p==None and q==None else False.
        
DFS - iterative


class Solution:

    def isSameTree(self, p, q):
        stack = [(p, q)]
        while stack:
            (p, q) = stack.pop()
            if p and q and p.val == q.val:
                stack.extend([
                    (p.left,  q.left),
                    (p.right, q.right)
                ])
            elif p or q:
                return False
        return True
        
BFS - iterative


class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        queue = deque()
        queue.append((p, q))
        
        while queue:
            p, q = queue.popleft()
            
            if not p and not q:
                continue
            if not p or not q or p.val != q.val:
                return False
            
            queue.append((p.left, q.left))
            queue.append((p.right, q.right))
        
        return True
