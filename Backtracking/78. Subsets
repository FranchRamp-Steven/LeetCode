//Python

Intuition 

class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        n = len(nums)
        output = [[]]
        
        for num in nums:
            #print(output)
            output += [curr + [num] for curr in output]
            #print(output)
        
        return output
        

        
Complexity Analysis

Time complexity: O(N×2^N) to generate all subsets and then copy them into output list.

Space complexity: O(N×2^N). This is exactly the number of solutions for subsets multiplied by the number NN of elements to keep for each subset.
should be 2^N since the copy of number is implementation-dependent but cause we extend output array each time, and that operation runs in O(n) time complexity

For a given number, it could be present or absent (i.e. binary choice) in a subset solution. As as result, for NN numbers, we would have in total 2^N2 
N choices (solutions).



Backtracking is an algorithm for finding all solutions by exploring all potential candidates. 
If the solution candidate turns to be not a solution (or at least not the last one), backtracking algorithm discards 
it by making some changes on the previous step, i.e. backtracks and then try again.

Algorithm

We define a backtrack function named backtrack(first, curr) which takes the index of first element to add and a current combination as arguments.

If the current combination is done, we add the combination to the final output.

Otherwise, we iterate over the indexes i from first to the length of the entire sequence n.

Add integer nums[i] into the current combination curr.

Proceed to add more integers into the combination : backtrack(i + 1, curr).

Backtrack by removing nums[i] from curr.


class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        def backtrack(first = 0, curr = []):
            # if the combination is done
            if len(curr) == k:  
                output.append(curr[:])
                return
            for i in range(first, n):
                # add nums[i] into the current combination
                curr.append(nums[i])
                # use next integers to complete the combination
                backtrack(i + 1, curr)
                # backtrack
                curr.pop()
        
        output = []
        n = len(nums)
        for k in range(n + 1):
            backtrack()
        return output
        
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        res = []
        
        def dfs(idx = 0, tmp = []):
            res.append(tmp)
            
            if idx == len(nums):
                return 
            
            for i in range(idx, len(nums)):
                dfs(i + 1, tmp + [nums[i]])
               
        dfs()
        return res
        
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        res = []

        subset = []

        def dfs(i):
            if i >= len(nums):
                res.append(subset.copy())
                return
            # decision to include nums[i]
            subset.append(nums[i])
            dfs(i + 1)
            # decision NOT to include nums[i]
            subset.pop()
            dfs(i + 1)

        dfs(0)
        return res
        
Complexity Analysis

Time complexity: O(N×2^N) to generate all subsets and then copy them into output list.

Space complexity: O(N). We are using O(N) space to maintain curr, and are modifying curr in-place with backtracking.
Note that for space complexity analysis, we do not count space that is only used for the purpose of returning output, so the output array is ignored.


//


print(bin(4 | 1 << 3))
0b1100

on pourrait mettre

nth_bit = 1 << n
for i in range(2**n):
    # generate bitmask, from 0..00 to 1..11
    bitmask = bin(i | nth_bit)[3:]


class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        n = len(nums)
        output = []
        
        for i in range(2**n, 2**(n + 1)):
            # generate bitmask, from 0..00 to 1..11
            bitmask = bin(i)[3:]
            
            # append subset corresponding to that bitmask
            output.append([nums[j] for j in range(n) if bitmask[j] == '1'])
        
        return output
