//Python

class TimeMap:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.dix = {}
        

    def set(self, key: str, value: str, timestamp: int) -> None:
        if key not in self.dix:
            self.dix[key] = {timestamp: value} 
            self.dix[key]["timestamps"] = [timestamp]
        else:
            self.dix[key][timestamp] = value
            self.dix[key]["timestamps"].append(timestamp)
        """ maybe use self.dix.setdefault(key, []).append([timestamp, value])"""

            
    def get(self, key: str, timestamp: int) -> str:
        if key in self.dix:
            if timestamp in self.dix[key]:
                return self.dix[key][timestamp];
            else:
                
                # 10 20 30
                timestamps = self.dix[key]["timestamps"]
                if timestamp > timestamps[-1]: return self.dix[key][timestamps[-1]]
                if timestamp < timestamps[0]: return ""
                
                i = 0; j = len(timestamps) - 1;
                while i <= j:
                    mid = (i + j) // 2;
                    if timestamp < timestamps[mid]:
                        j = mid - 1;
                    else:
                        i = mid + 1
                return self.dix[key][timestamps[j]]

class TimeMap:

    def __init__(self):
        self.times = collections.defaultdict(list)
        self.values = collections.defaultdict(list)

    def set(self, key: str, value: str, timestamp: int) -> None:
        self.times[key].append(timestamp)
        self.values[key].append(value)

    def get(self, key: str, timestamp: int) -> str:
        i = bisect.bisect(self.times[key], timestamp)
        return self.values[key][i - 1] if i else ''


//Java

class Data {
    String val;
    int time;
    Data(String val, int time) {
        this.val = val;
        this.time = time;
    }
}
class TimeMap {

    /** Initialize your data structure here. */
    Map<String, List<Data>> map;
    public TimeMap() {
        map = new HashMap<String, List<Data>>();
    }
    
    public void set(String key, String value, int timestamp) {
        if (!map.containsKey(key)) map.put(key, new ArrayList<Data>());
        map.get(key).add(new Data(value, timestamp));
    }
    
    public String get(String key, int timestamp) {
        if (!map.containsKey(key)) return "";
        return binarySearch(map.get(key), timestamp);
    }
    
    protected String binarySearch(List<Data> list, int time) {
        int low = 0, high = list.size() - 1;
        while (low < high) {
            int mid = (low + high) >> 1;
            if (list.get(mid).time == time) return list.get(mid).val;
            if (list.get(mid).time < time) {
                if (list.get(mid+1).time > time) return list.get(mid).val;
                low = mid + 1;
            }
            else high = mid -1;
        }
        return list.get(low).time <= time ? list.get(low).val : "";
    }
}

class TimeMap {

    Map<String, TreeMap<Integer, String>> map;
    /** Initialize your data structure here. */
    public TimeMap() {
        map = new HashMap();
    }
    
    public void set(String key, String value, int timestamp) {
        map.putIfAbsent(key, new TreeMap());
        map.get(key).put(timestamp, value);
    }
    
    public String get(String key, int timestamp) {
        TreeMap<Integer, String> treeMap = map.get(key);
        
        if (treeMap == null) return "";
        
        Integer floorKey = treeMap.floorKey(timestamp);
        
        if (floorKey == null) return "";
        return treeMap.get(floorKey);
    }
}

//C++

class TimeMap {
public:
    /** Initialize your data structure here. */
    unordered_map<string, vector<pair<int, string>>> m;
    TimeMap() {
        
    }
    
    void set(string key, string value, int timestamp) {
        m[key].push_back({timestamp, value});
    }
    
    string get(string key, int timestamp) {
        if(!m.count(key))
            return "";
        int start = 0, end = m[key].size();
        while(start < end) {
            int mid = start + (end-start)/2;
            if(m[key][mid].first > timestamp)
                end = mid;
            else
                start = mid + 1;
        }
        return start > 0 and start <= m[key].size() ? m[key][start - 1].second : "";
    }
};
