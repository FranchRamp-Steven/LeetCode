//Python

class Solution:
    def search(self, nums, target):
        l, r = 0, len(nums) - 1
        while l <= r:
            mid = (l + r) // 2
            if nums[mid] < target:
                l = mid + 1
            elif nums[mid] > target:
                r = mid - 1
            else:
                return mid
        return -1

//Java

class Solution {
    public int search(int[] nums, int target) {
        int L = nums.length;   
        return bin(nums,0,L-1,target);
    }
    public int bin(int[] nums,int low, int high,int t){
        int result = -1;
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid]==t) return mid;
            else if(nums[mid]>t) {
                 high = mid-1;
            }else{
                 low = mid+1;
            }
        }                     
        return result;
    }
}

//C++

class Solution {
public:
    int binary(vector<int>v,int l, int r, int key)
    {
		// till l doesn't exceed r
        if(r >= l)
        {
            int mid = (l+r)/2;
			
			// if key equals mid return mid
            if(key == v[mid])
                return mid;
				
			// if key is less than mid
			// recursive call for left half
            else if(key < v[mid])
                return binary(v,l,mid-1,key);
				
			// key is greater than mid
			// recursive call for right half
            else
                return binary(v,mid+1,r,key);
        }
		
		// if key not found
        return -1;
    }
    
    
    int search(vector<int>& nums, int target) {
        int result = binary(nums,0,nums.size()-1,target);
		
		// if func returns -1 key doesn't exists
        if (result == -1)
            return -1;
		
		// return index of key
        else
            return result;   
    }
	// for github repository link go to my profile.
};
