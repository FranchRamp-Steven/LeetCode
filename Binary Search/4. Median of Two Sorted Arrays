//Python

you could surely solve this problem in a similar way as you mentioned. But this would result in a higher time and space complexity.
Especially sorted() works in O((n+m) log (n+m)) time and O(n+m) space.

Time: O(log(min(m,n))
Space: O(1)

Let's go through an example of the question

   A      : [2 4 6]
   B      : [1 3 5]
   Final  : [1 2 3 4 5 6]
   Median : (3 + 4) / 2 = 3.5
Next, we want to generate all possible partitions of A and B. Since both are sorted, we guarantee that these are the only possible partitions

A      : [ | 2 4 6]    L : [1 3 5]
B      : [1 3 5 | ]    R : [2 4 6] ----- ❌, since 5 > 2

A      : [2 | 4 6]     L : [1 2 3]
B      : [1 3 | 5]     R : [4 5 6] ----- ✔, since 2 < 5 and 3 < 4

A      : [2 4 | 6]     L : [1 2 4]
B      : [1 | 3 5]     R : [3 5 6] ----- ❌, since 4 > 3

A      : [2 4 6 | ]    L : [2 4 6]
B      : [ | 1 3 5]    R : [1 3 5] ----- ❌, since 6 > 1
Q : How do we know if a partition is valid (ie. all values in L <= all values in R?

	We  only need to compare the 4 elements adjacent to the 2 partitions
Q : How do we represent empty partitions?

If it's a empty left partition, we use INT_MIN
else, we use INT_MAX
	We only need to check the 4 elements adjacent to the partition borders

With that, we build our solution

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
             
        # WE SHALL DO BINARY SEARCH ON THE SMALLER ARRAY, NUMS1
        if len(nums1) > len(nums2):
            return self.findMedianSortedArrays(nums2, nums1)
        
        # SETUP INT_MIN AND INT_MAX FOR EMPTY LEFT / RIGHT PARTITION
        INT_MIN, INT_MAX = -2**64, 2**64
        
        # SETUP LO AND HI POINTERS
        lo, hi = 0, len(nums1)
        #this makes the p1 and p2 perform the same when your (len(nums1) + len(nums2)) is even or odd.
        left_partition_size = (len(nums1) + len(nums2) + 1) // 2
        n = len(nums1) + len(nums2)
        
        # LOOP TILL OOB
        while lo <= hi:
            
            # GET THE PARITIONS OF BOTH ARRAYS
            p1 = (lo + hi) // 2
            p2 = left_partition_size - p1
            
            # print(f"NUMS1 : {nums1[:p1]} | {nums1[p1:]}")
            # print(f"NUMS2 : {nums2[:p2]} | {nums2[p2:]}")

            # GET THE 4 BOUNDARY NUMBERS
            nums1_left = nums1[p1 - 1] if p1 > 0 else INT_MIN
            #float("-infinity")
            nums1_right = nums1[p1] if p1 < len(nums1) else INT_MAX
            
            nums2_left = nums2[p2 - 1] if p2 > 0 else INT_MIN
            nums2_right = nums2[p2] if p2 < len(nums2) else INT_MAX
            
            # MOVE P1 LEFTWARDS
            if nums1_left > nums2_right:
                hi = p1 - 1
            
            # MOVE P1 RIGHTWARDS
            elif nums2_left > nums1_right:
                lo = p1 + 1
            
            # CORRECT PARTITION FOUND
            else:
                
                # ODD TOTAL LENGTH
                if n & 1:
                    return max(nums1_left, nums2_left)
                
                # EVEN TOTAL LENGTH
                return (max(nums1_left, nums2_left) + min(nums1_right, nums2_right)) / 2
                
                
                
                
                
                
                
The reason for using (l //2) and ( l//2 +1) is simply 
because the sub function kth is getting the element at index k in his context, 
which would be the k+1-th small element in A+B. You can see it from when l = len(A)+len(B) is odd, 
he is getting the element at index l/2.

Some notes from my understanding, please feel free to correct me.

ia, ib = len(a) / 2 , len(b) / 2
a[ia] = ma, b[ib] = mb
supposed all the elements that are at left of ma are la, right of ma are ra , 
same for lb, rb

if ia + ib < k: means the k-th element still exist in some larger part of the array
if ma < mb => la < ma < mb: solution can't exist in la
if ma > mb => lb < mb < ma: solution can't exist in lb
since we are deleted some smaller part, original we are seeking for the k-th, 
now we are seeking for the k - (len(smaller part)) th in the remaining two array

if ia + ib > k: means the k-th element still exist in some smaller part of the array
if ma < mb => ma < mb < rb: solution can't exist in rb
if ma > mb => mb < ma < ra: solution can't exist in la
since we are deleted some larger part, we are still finding the k-th element in the array

So personally I don't think the two indexing part you mentioned are supposed to ensure the recursion terminate. 
It's simply how the algorithm goes.

one thing need pay attention is, array slicing in python is O(n) complexity, 
so if one really pursues O(log(m+n)) complexity,
he should pass start and end indexes instead,

class Solution:
# @param {integer[]} nums1
# @param {integer[]} nums2
# @return {float}
    def find(self, nums1, s1, e1, nums2, s2, e2, k):
        if e1 - s1 < 0:
            return nums2[k + s2]
        if e2 - s2 < 0:
            return nums1[k + s1]
        if k < 1:
            return min(nums1[k + s1], nums2[k + s2])
        ia, ib = (s1 + e1) // 2 , (s2 + e2) // 2
        ma, mb = nums1[ia], nums2[ib]
        if (ia - s1) + (ib - s2) < k:
            if ma > mb:
                return self.find(nums1, s1, e1, nums2, ib + 1, e2, k - (ib - s2) - 1)
            else:
                return self.find(nums1, ia + 1, e1, nums2, s2, e2, k - (ia - s1) - 1)
        else:
            if ma > mb:
                return self.find(nums1, s1, ia - 1, nums2, s2, e2, k)
            else:
                return self.find(nums1, s1, e1, nums2, s2, ib - 1, k)

    def findMedianSortedArrays(self, nums1, nums2):
        l = len(nums1) + len(nums2)
        if l % 2 == 1:
            return self.find(nums1, 0, len(nums1) - 1, nums2, 0, len(nums2) - 1, l // 2)
        else:
            return (self.find(nums1, 0, len(nums1) - 1, nums2, 0, len(nums2) - 1, l // 2) + self.find(nums1, 0, len(nums1) - 1, nums2, 0, len(nums2) - 1, l // 2 - 1)) / 2.0

though the code may look a little verbose.



Idea: Simple Two Pointer Solution // Time: O(n+m) Space: O(1)

Use two pointer to implictly build half of sorted merged list
BUT INSTEAD of actually building the list, ONLY save the last two values of this (implict) sorted half list
Use those to values to generate answer
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        n1, n2 = len(nums1), len(nums2)
        n = n1 + n2
       
        end = n // 2    
        i, i1, i2  = 0, 0, 0             # Pointer for implict merge list, nums1 pointer, nums2 pointer 
        current, previous = 0, 0         # current and previous value in implict merge
        
        # Implictly build half of the sorted merge list
        # but only save last values
        while i <= end:
            previous = current
            if i1 == n1:                 # First list is exhausted ==> choose from second list
                current = nums2[i2] 
                i2 += 1
            elif i2 == n2:               # Second list ist exhaused ==> choose from first list
                current = nums1[i1]
                i1 += 1
            elif nums1[i1] < nums2[i2]:  # Choose element from first list
                current = nums1[i1]
                i1 += 1
            else:                        # Choose element from second list
                current = nums2[i2]      
                i2 += 1

            i += 1
        
        if n % 2 == 0:
            return (previous + current) / 2.0
        else: 
            return current
