//Python

Time Complexity : O(N), where N is the number of nodes in the linked list. We traverse linked list once and store it in array. Then we traverse the array once. Thus overall time- O(2N) = O(N)
Space Complexity : O(N), required to store nodes of list into array

class Solution:
    def reorderList(self, head):
        arr, Iter = [], head
        while Iter:
            arr.append(Iter)
            Iter = Iter.next
        
        L, R = 1, len(arr)-1
        for i in range(len(arr)):
            if i & 1:
                head.next = arr[L]
                L += 1
            else:
                head.next = arr[R]
                R -= 1
            head = head.next
        head.next = None

First find the mid of linked list. This can be done using slow & fast pointer algorithm
Then we reverse the 2nd half and place the R pointer at the end
Initialize L pointer to head->next
We can now simply re-order by placing nodes from L and R pointers in alternating fashion till they meet.

Time Complexity : O(N), we need O(N) to find mid of list, another O(N/2) = O(N) to reverse the 2nd half and finally O(N) to re-order the list. Thus overall time: O(3N) = O(N)
Space Complexity : O(1), only constant extra space is used

class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        if not head:
            return

        # find the mid point
        slow = fast = head 
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        # reverse the second half in-place
        pre, node = None, slow
        while node:
            pre, node.next, node = node, pre, node.next

        # Merge in-place; Note : the last node of "first" and "second" are the same
        first, second = head, pre
        while second.next:
            first.next, first = second, first.next
            second.next, second = first, second.next

        return
        
# Splits in place a list in two halves, the first half is >= in size than the second.
# @return A tuple containing the heads of the two halves
def _splitList(head):
    fast = head
    slow = head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

    middle = slow.next
    slow.next = None

    return head, middle

# Reverses in place a list.
# @return Returns the head of the new reversed list
def _reverseList(head):

    last = None
    currentNode = head

    while currentNode:
        nextNode = currentNode.next
        currentNode.next = last
        last = currentNode
        currentNode = nextNode

    return last

# Merges in place two lists
# @return The newly merged list.
def _mergeLists(a, b):

    tail = a
    head = a

    a = a.next
    while b:
        tail.next = b
        tail = tail.next
        b = b.next
        if a:
            a, b = b, a
            
    return head


class Solution:

    # @param head, a ListNode
    # @return nothing
    def reorderList(self, head):

        if not head or not head.next:
            return

        a, b = _splitList(head)
        b = _reverseList(b)
        head = _mergeLists(a, b)


//Java

Basic Solution Using Array or Deque and Repeat pop_left() andpop()

# algorithm pseudo code
dq = [1, 2, 3, 4, 5]
while dq:
	dq.pop_left()
	if dq: dq.pop()
dq =  [1, 2, 3, 4, 5] =>  dq.pop_left()   =>   1
dq =     [2, 3, 4, 5] =>  dq.pop()        =>   5
dq =     [2, 3, 4]    =>  dq.pop_left()   =>   2
dq =        [3, 4]    =>  dq.pop()        =>   4
dq =        [3]       =>  dq.pop_left()   =>   3
Time  Complexity: O(N)
Space Complexity: O(N)

class Solution {
    public void reorderList(ListNode head) {
        ArrayList<ListNode> dq = new ArrayList<ListNode>();
        ListNode p = head.next;
        while (p != null) {
            dq.add(p);
            p = p.next;
        }
        p = head;
        while (dq.size() > 0) {
            p.next = dq.get(dq.size() - 1);
            p = p.next;
            dq.remove(dq.size() - 1);
            if (dq.size() > 0) {
                p.next = dq.get(0);
                p = p.next;
                dq.remove(0);
            }
        }
        p.next = null;
    }
}

step 1: find the middle pointer of the linked list and split the linked list into two halves using slow and fast pointers
								head = [1, 2, 3]
head = [1, 2, 3, 4, 5]    =>
								mid  = [4, 5]
step 2: reverse the second half
head = [1, 2, 3]
mid  = [4, 5]             =>    mid = [5, 4]
step 3: interleaving merge the first half and the reversed second half
head = [1, 2, 3]
					      =>    head = [1, 5, 2, 4, 3]
mid = [5, 4]
Time  Complexity: O(N)
Space Complexity: O(1)

class Solution {
    public void reorderList(ListNode head) {
        if (head.next == null) return;
        // step 1: find the middle pointer of the linked list
        ListNode slow = head, fast = head;
        while (fast.next != null && fast.next.next!= null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode mid = slow.next;
        slow.next = null;

        // step 2: reverse the last half linked list
        ListNode p = mid, q = mid.next, pp = null, qq = null;
        mid.next = null;
        while (q != null) {
            pp = p;
            p = q;
            q = q.next;
            p.next = pp;
        }
        mid = p;

        // step 3: merge first half and reversed last half
        p = head;
        q = mid;
        while (q != null) {
            pp = p; qq = q;
            p = p.next; q = q.next;
            pp.next = qq; qq.next = p;
        }
    }
}


//C++

class Solution {
public:
    void reorderList(ListNode* head) {
        vector<ListNode*> arr;
        for(auto iter = head; iter; iter = iter -> next)
            arr.push_back(iter);
        
		// pointers to start and end of list. Re-order in alternating fashion from both end
        int L = 1, R = size(arr)-1;
        for(int i = 0; i < size(arr); i++, head = head -> next) 
            if(i & 1)                             // odd iteration:
                head -> next = arr[L++];          //        - pick node from L & update L ptr
            else                                  // even iteration
                head -> next = arr[R--];          //        - pick node from R & update R ptr
        
        head -> next = nullptr;
    }
};

class Solution {
public:
	// 876. Middle of the Linked List - returns the mid of list using slow-fast pointer approach
    ListNode* middleNode(ListNode* head) {
        auto slow = head, fast = head;
        while(fast && fast -> next)
            slow = slow -> next,
            fast = fast -> next -> next;            // fast moves at 2x speed
        return slow;                                // slow ends up at mid
    }
	// 206. Reverse Linked List - reverses and returns the head of reversed list
    ListNode* reverseList(ListNode* head) {
        ListNode *prev = nullptr;
        while(head) {
            auto nextNode = head -> next;           // store next node before reversing next ptr of cur
            head -> next = prev;                    // reverse the next ptr to previous node
            prev = head;                            // update previous node as cur
            head = nextNode;                        // move to orignal next node
        }
        return prev;                                // returns head of reversed list
    }
    void reorderList(ListNode* head) {
        if(!head || !head -> next) return;
        auto mid = middleNode(head);
        auto R = reverseList(mid), L = head -> next;
        for(int i = 0; L != R; i++, head = head -> next)     // re-order in alternating fashion 
            if(i & 1) {                              
                head -> next = L;
                L = L -> next;
            }
            else {
                head -> next = R;
                R = R -> next;
            }
    }
};

