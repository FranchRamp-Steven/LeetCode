//Python

tterative approach takes O(1); as we dont store any aux space.
recursive approach takes roughly O(n); as we'll be storing all the nodes (roughly) in the call stack.

//v1
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head:
            result = ListNode(head.val)

            while(head.next):
                result = ListNode(head.next.val, result)
                head = head.next

            return result
        return None
//v2     
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # Initialize prev pointer as NULL...
        prev = None
        # Initialize the curr pointer as the head...
        curr = head
        # Run a loop till curr points to NULL...
        while curr:
            # Initialize next pointer as the next pointer of curr...
            next = curr.next
            # Now assign the prev pointer to curr’s next pointer.
            curr.next = prev
            # Assign curr to prev, next to curr...
            prev = curr
            curr = next
        return prev       # Return the prev pointer to get the reverse linked list...       
//v3
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        def helper(nexto, prev):
            if(nexto.next):
                res = ListNode(nexto.next.val, prev)
                return helper(nexto.next, res)
            return prev
        
        if head:
            return helper(head, ListNode(head.val))
        return None
//v4       
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def reverseList(self, head):
        if (not head) or (not head.next):
            return head
        
        p = self.reverseList(head.next)
        head.next.next = head
        head.next = None
        return p

if __name__ == "__main__":
    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))
    solution = Solution()
    Result = solution.reverseList(head)

    print(Result.val, Result.next.val, Result.next.next.val, Result.next.next.next.val, Result.next.next.next.next.val)```

//v5

class Solution:
    def flipMapping(self, curr, nex):
        if nex.next:
            self.flipMapping(curr.next, nex.next)
        else:
            self.new_head = nex
        
        nex.next = curr
    
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head
        
        self.new_head = None   
        self.flipMapping(head, head.next)   
        head.next = None   
        return(self.new_head)
	
//Java

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        // Special case...
        if (head == null || head.next == null) return head;
        // Create a new node to call the function recursively and we get the reverse linked list...
        ListNode res = reverseList(head.next);
        // Set head node as head.next.next...
        head.next.next = head;
        //set head's next to be null...
        head.next = null;

        return res;     // Return the reverse linked list...
    }
}

Example 1:

head : 1 -> 2 -> 3 -> None
output : 3 -> 2 -> 1 -> None
The ideal of Pointer is important for understanding linklist.

In recursive solution we need to break down the reverseList function to two parts:

base case: when the input reach this point will ruturn to avoid stack overflow.
When head or head.next is None, then return head.
A set of rules to break down the original problem to subproblems.
Redirect current head.next.next to itself.
For example: After the first return from base case, p -> 3 -> None and current head -> 2 -> 3 -> None. What we do here is move link from "3 point to None" to "3 point to 2".
Then current head : 2 <-> 3
Redirect current head.next to None.
Move link from "2 point to 3" to "2 point to None".
Then p -> 3 -> 2 -> None
call reverseList(head) (Here the head = 1 -> 2 -> 3 -> None)
	
	p = reverseList(head.next) (Here the head.next = 2 -> 3 -> None)
	
		p = reverseList(head.next) (Here the head.next = 3 -> None)
			head = 3 -> None
			match with base case return 3 -> None
		p = 3 -> None (Here you can see there is a new point, p, point to 3 -> None)
		
					p
					↓
		head = 2 -> 3 -> None
				figure 1
		
		head.next.next = head (Here you redirect 2.next.next to 2, which means redirect 3.next to 2.)
		
					p
		            ↓
		head = 2 -> 3
			   ↑    ↓
			    <---
			figure 2
				 
		head.next = head (Here you redirect 2.next from 3 to None)
		
					p
		            ↓
		head = 2 <- 3
			   ↓
			  None
			figure 3
			  
		return 3 -> 2 -> None
	p = 3 -> 2 -> None
	head.next.next = head (Here you redirect 1.next.next to 1, which means redirect 2.next to 1)
	
			   p    1 <-
		       ↓    ↓   ↑
		head = 3 -> 2 -> 
			figure 4

	head.next = head (Here you redirect 1.next from 2 to None)
	
	
			   p    
		       ↓    
		head = 3 -> 2 -> 1 -> None
				figure 5
	
	return 3 -> 2 -> 1 -> None
output: 3 -> 2 -> 1 -> None


//C++

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        // Special case...
        if(head == NULL || head->next == NULL)  return head;
        // Initialize prev pointer as the head...
        ListNode* prev = head;
        // Initialize curr pointer as the next pointer of prev...
        ListNode* curr = prev->next;
        // Initialize next of head pointer as NULL...
        head->next = NULL;
        // Run a loop till curr and prev points to NULL...
        while(prev != NULL && curr != NULL){
            // Initialize next pointer as the next pointer of curr...
            ListNode* next = curr->next;
            // Now assign the prev pointer to curr’s next pointer.
            curr->next = prev;
            // Assign curr to prev, next to curr...
            prev = curr;
            curr = next;
        }
        return prev;    // Return the prev pointer to get the reverse linked list...
    }
};
