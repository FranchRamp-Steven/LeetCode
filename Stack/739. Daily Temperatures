//Python

class Solution(object):
      def dailyTemperatures(self, T):
        # next greater number
        wait = [0]*len(T)
        stack = []
        
        for i, x in enumerate(T):      
            while stack and x > T[stack[-1]]:
                j = stack.pop()
                wait[j] = i - j
            stack.append(i)
        
        return wait

//Java

class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        if (temperatures == null) {
            throw new IllegalArgumentException("Input is null");
        }

        int len = temperatures.length;
        int[] result = new int[len];
        if (len <= 1) {
            return result;
        }

        // We are populating the result array in the reverse order.
        for (int i = len - 2; i >= 0; i--) {
            // We are now solving for ith temperature. We have already solved for everything
            // on the right side of index i.

            int k = i + 1;
            while (temperatures[i] >= temperatures[k] && result[k] != 0) {
                // We have found a lower temperature, we can just move pointer by the days
                // stored at result[k] to search for a higher temperature.
                // All temperatures between k and k + result[k] are smaller than temperatures[k]
                // so we can safely move to k + result[k].
                k += result[k];
            }
            if (temperatures[i] < temperatures[k]) {
                // If a higher temperature is found, the difference of indexes will give us the
                // number days to get the higher temperature.
                result[i] = k - i;
            }
        }

        return result;
    }
}

class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        if (temperatures == null) {
            throw new IllegalArgumentException("Input array is null");
        }

        int len = temperatures.length;
        int[] result = new int[len];
        if (len <= 1) {
            return result;
        }

        Deque<Integer> stack = new ArrayDeque<>();
        for (int i = 0; i < len; i++) {
            while (!stack.isEmpty() && temperatures[stack.peek()] < temperatures[i]) {
                int idx = stack.pop();
                result[idx] = i - idx;
            }
            stack.push(i);
        }

        return result;
    }
}

//C++

class Solution {
public:
    vector<int> dailyTemperatures(vector<int>& temperatures) {
        int n = temperatures.size();
        vector<int> res(n);
        for (int i = n - 1; i >= 0; --i) {
            int j = i+1;
            while (j < n && temperatures[j] <= temperatures[i]) {
                if (res[j] > 0) j = res[j] + j;
                else j = n;
            }
            // either j == size || temperatures[j] > temperatures[i]
            if (j < n) res[i] = j - i;
        }
        return res;
    }
};
