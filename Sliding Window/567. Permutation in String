//Java

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int[] map = new int[26];
        for(char c : s1.toCharArray()) map[c - 'a']++;
        int j = 0, i = 0;
        int count_chars = s1.length();
        while(j < s2.length()){
            if(map[s2.charAt(j++) - 'a']-- > 0)
                count_chars--;
            if(count_chars == 0) return true;
            if(j - i == s1.length() && map[s2.charAt(i++) - 'a']++ >= 0)
                count_chars++;
        }
        return false;
    }
}

//C++

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int n1 = s1.length();
        int n2 = s2.length();
        
        if(n1 > n2) return false;
        
        vector<int> l1(26);
        vector<int> l2(26);
        
        int matches = 0;
        
        for(int i = 0; i < n1; i++){
            l1[int(s1[i]) - 97] += 1;
            l2[int(s2[i]) - 97] += 1;
        }
        
        for(int i = 0; i < 26; i++){ 
            matches += l1[i] == l2[i] ? 1 : 0 ;
        }
        
        int i;
        
        for(int l = 0, r = n1; r < n2; r++){
            if(matches == 26) return true;
            
            i = int(s2[r]) - 97;
            l2[i] += 1;
            
            if(l1[i]  == l2[i]){
                matches += 1;
            }
            else if(l1[i]  == l2[i] - 1){
                matches -=1;
            }
            
            i = int(s2[l]) - 97;
            l2[i] -= 1;
            
            if(l1[i]  == l2[i]){
                matches += 1;
            }
            else if(l1[i] == l2[i] + 1){
                matches -=1;
            }
            l++;
        }
        
        return matches == 26;
    }
};
