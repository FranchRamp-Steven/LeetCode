//Java - Time and Memory Optimal
//v1
class Solution {

    public boolean isValidSudoku(char[][] board) {
        HashSet<String> h1 = new HashSet<String>();

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] != '.') {
                    //Check whether HashSet contains duplicate elements in row and column
                    if (
                        h1.contains("row" + i + board[i][j]) ||
                        h1.contains("col" + j + board[i][j])
                    ) {
                        return false;
                    }
                    h1.add("row" + i + board[i][j]);
                    h1.add("col" + j + board[i][j]);

                    //Check whether Box contains duplicate elements in it
                    if (h1.contains("box" + (i / 3) + (j / 3) + board[i][j])) {
                        return false;
                    }
                    h1.add("box" + (i / 3) + (j / 3) + board[i][j]);
                }
            }
        }

        return true;
    }
}

//v2
class Solution {
    public boolean isValidSudoku(char[][] board) {
    for(int i=0;i<9;i++){
        if(!isValid(board,i,i,0,8)){
            return false;
        }
        if(!isValid(board,0,8,i,i)){
            return false;
        }
        if(!isValid(board,(i/3)*3,(i/3)*3+2,(i%3)*3,(i%3)*3+2)){
            return false;
        }
    }
    return true;

}

    private boolean isValid(char[][] board,int x1,int x2,int y1,int y2){
        boolean[] boolArrays = new boolean[10];
        for(int i=x1;i<=x2;i++){
            for(int j=y1;j<=y2;j++){
                if(board[i][j]!='.'){
                    if(boolArrays[Character.getNumericValue(board[i][j])]){
                        return false;
                    }else{
                        boolArrays[Character.getNumericValue(board[i][j])] = true;
                    }
                }
            }
        }
        return true;
    }
    
}

//C++ - Time ...

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int rows[9][9] = {0};
        int cols[9][9] = {0};
        int blocks[3][3][9] = {0};

        for(int r=0;r<9;r++)
        {
            for(int c=0;c<9;c++)
            {
                if(board[r][c]=='.')continue;
                int num = board[r][c]-'1';
                if(cols[num][c]++ || rows[r][num]++ || blocks[r/3][c/3][num]++)
                    return false;
            }
        }

        return true;
    }
};
